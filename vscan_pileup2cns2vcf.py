'''
Takes output file generated by VarScan2 pileup2cns function and converts the formats.
'''

import argparse, math, re

parser = argparse.ArgumentParser(
    description="Converts VarScan2 pileup2cns output to native format and vice-versa.\nInput is automatically detected")

parser.add_argument('input', help='Input file generated by VarScan2 pileup2cns')
# parser.add_argument('output', help='output file name')

args = parser.parse_args()

# Function to print vcf header
def printVcfHeader():
    print("##fileformat=VCFv4.2\n"
        "##source=VarScan2\n"
        "##INFO=<ID=DP,Number=1,Type=Integer,Description=\"read depth\">\n"
        "##INFO=<ID=Reads1,Number=1,Type=Integer,Description=\"reads supporting reference allele\">\n"
        "##INFO=<ID=Reads2,Number=1,Type=Integer,Description=\"reads supporting variant allele\">\n"
        #"##INFO=<ID=VarFreq,Number=1,Type=String,Description=\"frequency of variant allele by read count\">\n"
        "##INFO=<ID=Strands1,Number=1,Type=Integer,Description=\"strands on which reference allele was observed\">\n"
        "##INFO=<ID=Strands2,Number=1,Type=Integer,Description=\"strands on which variant allele was observed\">\n"
        "##INFO=<ID=Qual1,Number=1,Type=Integer,Description=\"average base quality of reference-supporting read bases\">\n"
        "##INFO=<ID=Qual2,Number=1,Type=Integer,Description=\"average base quality of variant-supporting read bases\">\n"
        "##INFO=<ID=Pvalue,Number=1,Type=Float,Description=\"Significance of variant read count vs. expected baseline error\">\n"
        "##INFO=<ID=MapQual1,Number=1,Type=Integer,Description=\"Average map quality of ref reads (only useful if in pileup)\">\n"
        "##INFO=<ID=MapQual2,Number=1,Type=Integer,Description=\"Average map quality of var reads (only useful if in pileup)\">\n"
        "##INFO=<ID=Reads1Plus,Number=1,Type=Integer,Description=\"Number of reference-supporting reads on + strand\">\n"
        "##INFO=<ID=Reads1Minus,Number=1,Type=Integer,Description=\"Number of reference-supporting reads on - strand\">\n"
        "##INFO=<ID=Reads2Plus,Number=1,Type=Integer,Description=\"Number of reference-supporting reads on + strand\">\n"
        "##INFO=<ID=Reads2Minus,Number=1,Type=Integer,Description=\"Number of reference-supporting reads on - strand\">\n"
        #"##INFO=<ID=VarAllele,Number=1,Type=String,Description=\"Most frequent non-reference allele observed\">\n"
        "##INFO=<ID=AF,Number=1,Type=Float,Description=\" frequent of variant\">\n"
        "##contig=<ID=hg38_knownGene_ENST00000610292.4,length=19080>\n"
#          "##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">\n"
#          "##FORMAT=<ID=GQ,Number=1,Type=Integer,Description=\"Genotype Quality\">\n"
#          "##FORMAT=<ID=DP,Number=1,Type=Integer,Description=\"Read Depth\">\n"
#          "##FORMAT=<ID=RD,Number=1,Type=Integer,Description=\"Depth of reference-supporting bases (reads1)\">\n"
#          "##FORMAT=<ID=AD,Number=1,Type=Integer,Description=\"Depth of variant-supporting bases (reads2)\">\n"
#          "##FORMAT=<ID=FREQ,Number=1,Type=String,Description=\"Variant allele frequency\">\n"
#          "##FORMAT=<ID=DP4,Number=1,Type=String,Description=\"Strand read counts: ref/fwd, ref/rev, var/fwd, var/rev\">\n"         
        "#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO")


# Function to convert Native to VCF record
def makeVcfRecord(nativeIp):
    """

    :rtype : Null
    """
    nIp = nativeIp.split("\t")
    chrom = nIp[0]
    pos = nIp[1]
    id = '.'
    qual = '.'
    filter = '.'
    ref = nIp[2]
    #alt =  nIp[18]
    strands1 = nIp[7]
    strands2 = nIp[8]
    qual1 = nIp[9]
    qual2 = nIp[10]
    pvalue = nIp[11]
    mapqual1 = nIp[12]
    mapqual2 = nIp[13]
    reads1plus = nIp[14]
    reads1minus = nIp[15]
    reads2plus = nIp[16]
    reads2minus = nIp[17]
    dp = int(nIp[4]) + int(nIp[5])
    varfreq = float(nIp[6].replace('%', '')) / 100
    varfreq = round(varfreq, 3)
    info = "AF=" + str(varfreq) + ";DP=" + str(dp) + ";Strands1=" + str(strands1)+ ";Strands2=" + str(strands2) + ";Qual1=" + str(qual1)+ ";Qual2=" + str(qual2) + ";Pvalue=" + str(pvalue) + ";MapQual1=" +	str(mapqual1) + ";MapQual2=" +	str(mapqual2)	+ ";Reads1Plus=" +	str(reads1plus) + ";Reads1Minus=" +	str(reads1minus) + ";Reads2Plus=" + str(reads2plus) + ";Reads2Minus=" + str(reads2minus)

    #vcf_format = "GT:GQ:DP:RD:AD:FREQ:DP4"
    alt = nIp[-1]

    #
    # VarScan has tricky output format for indels (why would they do that in the first place?)
    #

    if alt[0] == '-':
        alt = alt.replace('-', '')
    elif alt[0] == '+':
        alt = ref + alt.replace('+', '')
        
    print("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s" % (chrom, pos, id, ref, alt, qual, filter, info))

####
def NativeToVcf(inputFile):
    printVcfHeader()
    vs = open(inputFile, 'r')
    vs.readline().strip()
    for line in vs.readlines():
        if not line.startswith("chrom"):
            makeVcfRecord(line.strip())
    vs.close()


#vsIp = open(args.input, 'r')

#firstLine = vsIp.readline().strip()

NativeToVcf(args.input)
#vsIp.close()